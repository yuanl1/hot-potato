/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.11
 * apidoc:0.11.28 http://www.apidoc.me/kli/hot-potato/0.0.11/play_2_4_client
 */
package com.kli.hot.potato.v0.models {

  /**
   * A hot potato player
   */
  case class Player(
    name: String,
    port: Int
  )

  /**
   * A hot potato
   */
  case class Potato(
    kind: com.kli.hot.potato.v0.models.PotatoKind = com.kli.hot.potato.v0.models.PotatoKind.Regular,
    player: com.kli.hot.potato.v0.models.Player,
    toss: Int = 0,
    maxToss: Int
  )

  sealed trait PlayerKind

  object PlayerKind {

    case object Self extends PlayerKind { override def toString = "self" }
    case object Opponent extends PlayerKind { override def toString = "opponent" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends PlayerKind

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Self, Opponent)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): PlayerKind = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[PlayerKind] = byName.get(value.toLowerCase)

  }

  sealed trait PotatoKind

  object PotatoKind {

    case object Sweet extends PotatoKind { override def toString = "sweet" }
    case object Fingerling extends PotatoKind { override def toString = "fingerling" }
    case object Regular extends PotatoKind { override def toString = "regular" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends PotatoKind

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Sweet, Fingerling, Regular)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): PotatoKind = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[PotatoKind] = byName.get(value.toLowerCase)

  }

}

package com.kli.hot.potato.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.kli.hot.potato.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsHotPotatoPlayerKind = new play.api.libs.json.Reads[com.kli.hot.potato.v0.models.PlayerKind] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.kli.hot.potato.v0.models.PlayerKind] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.kli.hot.potato.v0.models.PlayerKind(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.kli.hot.potato.v0.models.PlayerKind(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesHotPotatoPlayerKind(obj: com.kli.hot.potato.v0.models.PlayerKind) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPlayerKind(obj: com.kli.hot.potato.v0.models.PlayerKind) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesHotPotatoPlayerKind: play.api.libs.json.Writes[PlayerKind] = {
      new play.api.libs.json.Writes[com.kli.hot.potato.v0.models.PlayerKind] {
        def writes(obj: com.kli.hot.potato.v0.models.PlayerKind) = {
          jsonWritesHotPotatoPlayerKind(obj)
        }
      }
    }

    implicit val jsonReadsHotPotatoPotatoKind = new play.api.libs.json.Reads[com.kli.hot.potato.v0.models.PotatoKind] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.kli.hot.potato.v0.models.PotatoKind] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.kli.hot.potato.v0.models.PotatoKind(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.kli.hot.potato.v0.models.PotatoKind(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesHotPotatoPotatoKind(obj: com.kli.hot.potato.v0.models.PotatoKind) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPotatoKind(obj: com.kli.hot.potato.v0.models.PotatoKind) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesHotPotatoPotatoKind: play.api.libs.json.Writes[PotatoKind] = {
      new play.api.libs.json.Writes[com.kli.hot.potato.v0.models.PotatoKind] {
        def writes(obj: com.kli.hot.potato.v0.models.PotatoKind) = {
          jsonWritesHotPotatoPotatoKind(obj)
        }
      }
    }

    implicit def jsonReadsHotPotatoPlayer: play.api.libs.json.Reads[Player] = {
      (
        (__ \ "name").read[String] and
        (__ \ "port").read[Int]
      )(Player.apply _)
    }

    def jsObjectPlayer(obj: com.kli.hot.potato.v0.models.Player) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "port" -> play.api.libs.json.JsNumber(obj.port)
      )
    }

    implicit def jsonWritesHotPotatoPlayer: play.api.libs.json.Writes[Player] = {
      new play.api.libs.json.Writes[com.kli.hot.potato.v0.models.Player] {
        def writes(obj: com.kli.hot.potato.v0.models.Player) = {
          jsObjectPlayer(obj)
        }
      }
    }

    implicit def jsonReadsHotPotatoPotato: play.api.libs.json.Reads[Potato] = {
      (
        (__ \ "kind").read[com.kli.hot.potato.v0.models.PotatoKind] and
        (__ \ "player").read[com.kli.hot.potato.v0.models.Player] and
        (__ \ "toss").read[Int] and
        (__ \ "max_toss").read[Int]
      )(Potato.apply _)
    }

    def jsObjectPotato(obj: com.kli.hot.potato.v0.models.Potato) = {
      play.api.libs.json.Json.obj(
        "kind" -> play.api.libs.json.JsString(obj.kind.toString),
        "player" -> jsObjectPlayer(obj.player),
        "toss" -> play.api.libs.json.JsNumber(obj.toss),
        "max_toss" -> play.api.libs.json.JsNumber(obj.maxToss)
      )
    }

    implicit def jsonWritesHotPotatoPotato: play.api.libs.json.Writes[Potato] = {
      new play.api.libs.json.Writes[com.kli.hot.potato.v0.models.Potato] {
        def writes(obj: com.kli.hot.potato.v0.models.Potato) = {
          jsObjectPotato(obj)
        }
      }
    }
  }
}

package com.kli.hot.potato.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.kli.hot.potato.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: PlayerKind
    private[this] val enumPlayerKindNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${com.kli.hot.potato.v0.models.PlayerKind.all.mkString(", ")}"

    implicit val pathBindableEnumPlayerKind = new PathBindable.Parsing[com.kli.hot.potato.v0.models.PlayerKind] (
      PlayerKind.fromString(_).get, _.toString, enumPlayerKindNotFound
    )

    implicit val queryStringBindableEnumPlayerKind = new QueryStringBindable.Parsing[com.kli.hot.potato.v0.models.PlayerKind](
      PlayerKind.fromString(_).get, _.toString, enumPlayerKindNotFound
    )

    // Enum: PotatoKind
    private[this] val enumPotatoKindNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${com.kli.hot.potato.v0.models.PotatoKind.all.mkString(", ")}"

    implicit val pathBindableEnumPotatoKind = new PathBindable.Parsing[com.kli.hot.potato.v0.models.PotatoKind] (
      PotatoKind.fromString(_).get, _.toString, enumPotatoKindNotFound
    )

    implicit val queryStringBindableEnumPotatoKind = new QueryStringBindable.Parsing[com.kli.hot.potato.v0.models.PotatoKind](
      PotatoKind.fromString(_).get, _.toString, enumPotatoKindNotFound
    )

  }

}


package com.kli.hot.potato.v0 {

  object Constants {

    val Namespace = "com.kli.hot.potato.v0"
    val UserAgent = "apidoc:0.11.28 http://www.apidoc.me/kli/hot-potato/0.0.11/play_2_4_client"
    val Version = "0.0.11"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String,
    auth: scala.Option[com.kli.hot.potato.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import com.kli.hot.potato.v0.models.json._

    private[this] val logger = play.api.Logger("com.kli.hot.potato.v0.Client")

    logger.info(s"Initializing com.kli.hot.potato.v0.Client for url $baseUrl")

    def players: Players = Players

    def potatoes: Potatoes = Potatoes

    object Players extends Players {
      override def getByKind(
        kind: com.kli.hot.potato.v0.models.PlayerKind,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.kli.hot.potato.v0.models.Player]] = {
        _executeRequest("GET", s"/players/${play.utils.UriEncoding.encodePathSegment(kind.toString, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.kli.hot.potato.v0.Client.parseJson("Seq[com.kli.hot.potato.v0.models.Player]", r, _.validate[Seq[com.kli.hot.potato.v0.models.Player]])
          case r => throw new com.kli.hot.potato.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Potatoes extends Potatoes {
      override def post(
        potato: com.kli.hot.potato.v0.models.Potato,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.kli.hot.potato.v0.models.Potato] = {
        val payload = play.api.libs.json.Json.toJson(potato)

        _executeRequest("POST", s"/potatoes", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.kli.hot.potato.v0.Client.parseJson("com.kli.hot.potato.v0.models.Potato", r, _.validate[com.kli.hot.potato.v0.models.Potato])
          case r if r.status == 410 => throw new com.kli.hot.potato.v0.errors.ValueResponse(r)
          case r => throw new com.kli.hot.potato.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 410")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.kli.hot.potato.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def players: com.kli.hot.potato.v0.Players
      def potatoes: com.kli.hot.potato.v0.Potatoes
    }

  }

  trait Players {
    def getByKind(
      kind: com.kli.hot.potato.v0.models.PlayerKind,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.kli.hot.potato.v0.models.Player]]
  }

  trait Potatoes {
    def post(
      potato: com.kli.hot.potato.v0.models.Potato,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.kli.hot.potato.v0.models.Potato]
  }

  package errors {

    import com.kli.hot.potato.v0.models.json._

    case class ValueResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val value = _root_.com.kli.hot.potato.v0.Client.parseJson("String", response, _.validate[String])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}